operation Any isDiagram() {
	return self.eClass().isAnnotatedAs("picto.diagram");
}

operation Any isNode() {
	return self.eClass().isAnnotatedAs("picto.node");
}

operation Any isLink() {
	return self.eClass().isAnnotatedAs("picto.link");
}

// Digram title - existed
 operation Any getTitle() {
	var attr = self.eClass().getAnnotationValue("picto.diagram", "title");
	return self.eGet(self.eClass().getEStructuralFeature(attr));
}

// Node&Link label
operation Any getLabel() {
	var ann = self.isNode() ? "picto.node" : "picto.link";
	var attr = self.eClass().getAnnotationValue(ann, "label");
	return self.eGet(self.eClass().getEStructuralFeature(attr));
}

// Node Border&Link color
operation Any getColor() {
	var ann = self.isNode() ? "picto.node" : "picto.link";
	return self.eClass().getAnnotationValue(ann, "color");
}

// Node&Link style
operation Any getStyle() {
	var ann = self.isNode() ? "picto.node" : "picto.link";
	return self.eClass().getAnnotationValue(ann, "style");
}

// Node filled color
operation Any getFilledColor() {
	return self.eClass().getAnnotationValue("picto.node", "fillcolor");
}

// Node figure
operation Any getShape() {
	return self.eClass().getAnnotationValue("picto.node", "shape");
}

// Node size
operation Any getHeight() {
	return self.eClass().getAnnotationValue("picto.node", "height");
}

// Node border width
operation Any getWidth() {
	return self.eClass().getAnnotationValue("picto.node", "width");
}

// Node label font color
operation Any getFontName() {
	var ann = self.isNode() ? "picto.node" : "picto.link";
	return self.eClass().getAnnotationValue(ann, "fontname");
}

// Node label font color
operation Any getFontColor() {
	var ann = self.isNode() ? "picto.node" : "picto.link";
	return self.eClass().getAnnotationValue(ann, "fontcolor");
}

// Node label font size
operation Any getFontSize() {
	var ann = self.isNode() ? "picto.node" : "picto.link";
	return self.eClass().getAnnotationValue(ann, "fontsize");
}

// Node margin
operation Any getMargin() {
	return self.eClass().getAnnotationValue("picto.node", "margin");
}

// Link source
operation Any getSource() {
	var ref = self.eClass().getAnnotationValue("picto.link", "source");
	return self.eGet(self.eClass().getEStructuralFeature(ref));
}

// Link target
operation Any getTarget() {
	var ref = self.eClass().getAnnotationValue("picto.link", "target");
	return self.eGet(self.eClass().getEStructuralFeature(ref));
}

// Link headlabel near Source 
operation Any getHeadLabel() {
	var attr = self.eClass().getAnnotationValue("picto.link", "headlabel");
	return self.eGet(self.eClass().getEStructuralFeature(attr));
}

// Link taillabel near Target
operation Any getTailLabel() {
	var attr = self.eClass().getAnnotationValue("picto.link", "taillabel");
	return self.eGet(self.eClass().getEStructuralFeature(attr));
}

// Link arrowhead
operation Any getArrowHead() {
	return self.eClass().getAnnotationValue("picto.link", "arrowhead");
}

// Link arrowtail
operation Any getArrowTail() {
	return self.eClass().getAnnotationValue("picto.link", "arrowtail");
}

// Link head&tail shape direction
operation Any getDir() {
	return self.eClass().getAnnotationValue("picto.link", "dir");
}

// Link width
operation Any getLinkWidth() {
	return self.eClass().getAnnotationValue("picto.link", "penwidth");
}

// Node class Attribute
operation Any getAttribute() {
	var attr;
	for (i in self.eGet(self.eClass().getEStructuralFeature("ownedAttribute"))) {
	attr = attr + "\\l" + i.name;
	}
	return attr;
}

// Node class Operation
operation Any getOperation() {
	var op;
	var opNewLine;
	for (i in self.eGet(self.eClass().getEStructuralFeature("ownedOperation"))) {
	op = op + i.name + "\\l";
	opNewLine = "|" + op;
	}
	return opNewLine;
}

// Node EnumerationLiteral
operation Any getLiteral() {
	var lit;
	for (i in self.eGet(self.eClass().getEStructuralFeature("ownedLiteral"))) {
	lit = lit + i.name + "\\l";
	}
	return lit;
}

// Node class Attribute
operation Any getVisibility() {
	return self.eGet(self.eClass().getEStructuralFeature("visibility"));
}

operation Any isAnnotatedAs(name: String) : Boolean {
	return self.getAnnotation(name).isDefined();
}

operation Any getAnnotationValue(name: String, detail: String) : Any {
	var ann = self.eAnnotations.selectOne(a|a.source = name);
	var det;

	if (ann.isDefined()) {
		det = ann.details.selectOne(d|d.key = detail);
	}

	if (det.isDefined()) {
		return det.value;
	}
	else if (self.eClass().name = "EClass") {
		for (s in self.eSuperTypes) {
			var sann = s.getAnnotationValue(name, detail);
			if (sann.isDefined()) {
				return sann;
			}
		}
	}
}

operation Any getAnnotation(name : String) : Any {
	var ann = self.eAnnotations.selectOne(a|a.source = name);
	
	if (self.eClass().name = "EClass" and ann.isUndefined()) {
		for (s in self.eSuperTypes) {
			var sann = s.getAnnotation(name);
			if (sann.isDefined()) return sann;
		}
	}
	
	return ann;
}


